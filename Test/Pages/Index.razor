@page "/"

<div style="margin:auto;width:80%;height:100%;position:relative">
    <canvas style="width:100%;height:100%" id="theHtml5Canvas"></canvas>
    <button @onclick="Refresh" style="position:absolute;top:0;left:0">Hello, Canvas!</button>
</div>

@functions{
    private int _drawTime = 0;

    public void Refresh()
    {
        this.StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        //create the canvas 2d context by the id of HTML canvas.
        Canvas2d dc = new Canvas2d("theHtml5Canvas");

        //fit canvas to control, and register Refresh to window.Resize
        dc.Size2Client(Refresh);

        dc.ResetInvokeTimes();
        int old = System.Environment.TickCount;
        dc.ClearRect(0, 0, dc.Width, dc.Height);
        Random rdm = new Random(old);
        Func<string> getRandomStyle = () => $"rgba({rdm.Next(0, 255)}, {rdm.Next(0, 255)}, {rdm.Next(0, 255)}, 1)";

        //fill some random shapes
        for (int ind = 0; ind < 100; ind++)
        {
            dc.FillStyle = getRandomStyle();
            int cx = rdm.Next(0, dc.Width);
            int cy = rdm.Next(0, dc.Height);
            int rx = rdm.Next(0, Math.Min(cx, dc.Width - cx));
            int ry = rdm.Next(0, Math.Min(cy, dc.Height - cy));
            switch (rdm.Next(0, 3))
            {
                case 0:
                    dc.BeginPath();
                    dc.Circle(cx, cy, Math.Min(rx, ry));
                    dc.Fill();
                    break;
                case 1:
                    dc.BeginPath();
                    dc.Ellipse(cx, cy, rx, ry);
                    dc.Fill();
                    break;
                default:
                    dc.FillRect(cx - rx, cy - ry, rx * 2, ry * 2);
                    break;
            }
        }

        //draw some random lines
        for (int ind = 0; ind < 100; ind++)
        {
            dc.StrokeStyle = getRandomStyle();
            dc.LineWidth = (float)(rdm.NextDouble() * 5);
            dc.LineCap = (LineCap)rdm.Next(0, 3);
            int lt = rdm.Next(0, 3);
            if (lt == 0)
            {
                dc.DrawLine(rdm.Next(0, dc.Width), rdm.Next(0, dc.Height), rdm.Next(0, dc.Width), rdm.Next(0, dc.Height));
            }
            else
            {
                double start = rdm.NextDouble();
                double span = (1.0 - start) * rdm.NextDouble() + start;
                double end = (start + span) * Math.PI * 2;
                start *= Math.PI * 2;

                bool anticlocksize = rdm.Next(0, 1) == 0;
                int cx = rdm.Next(0, dc.Width);
                int cy = rdm.Next(0, dc.Height);
                int rx = Math.Min(cx, dc.Width - cx);
                int ry = Math.Min(cy, dc.Height - cy);
                dc.BeginPath();
                if (lt == 1)
                {
                    dc.Arc(cx, cy, Math.Min(rx, ry) * rdm.NextDouble(), start, end, anticlocksize);
                }
                else
                {
                    dc.Ellipse(cx, cy, rx * rdm.NextDouble(), ry * rdm.NextDouble(), 0, start, end, anticlocksize);
                }
                dc.Stroke();
            }
        }

        //draw some images
        dc.DrawImage("image1", dc.Width / 2, dc.Height / 2);

        //draw some text at the center point
        string text = "Abcdefghijklmnopqrstuvwxyz";
        float fontSize = 36.0f;
        dc.Font = $"bold {fontSize}px Verdana";
        dc.TextAlign = TextAlign.Center;
        dc.TextBaseline = TextBaseline.Middle;
        float textWidth = dc.MeasureText(text);
        float centerX = dc.Width / 2;
        float centerY = dc.Height / 2;
        //dc.ClearRect(centerX - textWidth / 2, centerY - fontSize / 2, textWidth, fontSize);
        dc.FillStyle = "skyblue";
        dc.Save();
        dc.GlobalAlpha = 0.75f;
        dc.ShadowColor = "red";
        dc.ShadowOffsetX = 15.0f;
        dc.ShadowOffsetY = 15.0f;
        dc.ShadowBlur = 15.0f;
        dc.FillText(text, centerX, centerY);
        dc.Restore();

        //test CompositeOperation
        if (_drawTime > 3)
        {
            CompositeOperation co = (CompositeOperation)rdm.Next(0, (int)CompositeOperation.Luminosity);
            dc.GlobalCompositeOperation = co;
            dc.RotateAt(centerX, centerY, Math.PI / 2);
            dc.FillText(text, centerX, centerY);
            dc.GlobalCompositeOperation = CompositeOperation.Source_Over;
            dc.ResetTransform();
            dc.FillText("Composite: " + co.ToString(), centerX, centerY + (fontSize + 5));
        }

        //test some properties
        //Console.WriteLine("ImageSmoothingEnabled:" + dc.ImageSmoothingEnabled.ToString());
        //dc.ImageSmoothingEnabled = false;
        //Console.WriteLine("ImageSmoothingEnabled:" + dc.ImageSmoothingEnabled.ToString());
        //Console.WriteLine("MiterLimit:" + dc.MiterLimit.ToString());
        //dc.MiterLimit = 5.0f;
        //Console.WriteLine("MiterLimit:" + dc.MiterLimit.ToString());
        //Canvas2d dc1 = new Canvas2d("theHtml5Canvas");
        //Console.WriteLine("MiterLimit:" + dc1.MiterLimit.ToString());

        //dump the timespan and statistics
        System.Console.WriteLine("Draw time: " + (System.Environment.TickCount - old));
        //dc.DumpInvokeTimes();

        _drawTime++;
    }
}
